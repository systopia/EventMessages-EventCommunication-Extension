<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from de.systopia.eventmessages/xml/schema/CRM/Eventmessages/EventMessageRule.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:1d152a8c6f7bef1c3a5427aa05b0eae1)
 */
use CRM_Eventmessages_ExtensionUtil as E;

/**
 * Database access object for the EventMessageRule entity.
 */
class CRM_Eventmessages_DAO_EventMessageRule extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_event_message_rules';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique EventMessageRule ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * FK to Event
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $event_id;

  /**
   * is this rule active
   *
   * @var int|string|null
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $is_active;

  /**
   * civicrm_message_template to be used
   *
   * @var int|string
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $template_id;

  /**
   * list of (previous) participant status IDs
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $from_status;

  /**
   * list of (future) participant status IDs
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $to_status;

  /**
   * list of languages
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $languages;

  /**
   * list of roles
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $roles;

  /**
   * list of weights defining the order
   *
   * @var int|string|null
   *   (SQL type: int)
   *   Note that values will be retrieved from the database as a string.
   */
  public $weight;

  /**
   * list of attachments
   *
   * @var string|null
   *   (SQL type: text)
   *   Note that values will be retrieved from the database as a string.
   */
  public $attachments;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_event_message_rules';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Event Message Rules') : E::ts('Event Message Rule');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'event_id', 'civicrm_event', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'template_id', 'civicrm_msg_template', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique EventMessageRule ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_event_message_rules.id',
          'table_name' => 'civicrm_event_message_rules',
          'entity' => 'EventMessageRule',
          'bao' => 'CRM_Eventmessages_DAO_EventMessageRule',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'event_id' => [
          'name' => 'event_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Event ID'),
          'description' => E::ts('FK to Event'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_event_message_rules.event_id',
          'table_name' => 'civicrm_event_message_rules',
          'entity' => 'EventMessageRule',
          'bao' => 'CRM_Eventmessages_DAO_EventMessageRule',
          'localizable' => 0,
          'FKClassName' => 'CRM_Event_DAO_Event',
          'add' => NULL,
        ],
        'is_active' => [
          'name' => 'is_active',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Enabled'),
          'description' => E::ts('is this rule active'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_event_message_rules.is_active',
          'default' => NULL,
          'table_name' => 'civicrm_event_message_rules',
          'entity' => 'EventMessageRule',
          'bao' => 'CRM_Eventmessages_DAO_EventMessageRule',
          'localizable' => 0,
          'add' => NULL,
        ],
        'template_id' => [
          'name' => 'template_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Template ID'),
          'description' => E::ts('civicrm_message_template to be used'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_event_message_rules.template_id',
          'table_name' => 'civicrm_event_message_rules',
          'entity' => 'EventMessageRule',
          'bao' => 'CRM_Eventmessages_DAO_EventMessageRule',
          'localizable' => 0,
          'FKClassName' => 'CRM_Core_DAO_MessageTemplate',
          'add' => NULL,
        ],
        'from_status' => [
          'name' => 'from_status',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('From Status'),
          'description' => E::ts('list of (previous) participant status IDs'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_event_message_rules.from_status',
          'default' => NULL,
          'table_name' => 'civicrm_event_message_rules',
          'entity' => 'EventMessageRule',
          'bao' => 'CRM_Eventmessages_DAO_EventMessageRule',
          'localizable' => 0,
          'serialize' => self::SERIALIZE_COMMA,
          'add' => NULL,
        ],
        'to_status' => [
          'name' => 'to_status',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('To Status'),
          'description' => E::ts('list of (future) participant status IDs'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_event_message_rules.to_status',
          'default' => NULL,
          'table_name' => 'civicrm_event_message_rules',
          'entity' => 'EventMessageRule',
          'bao' => 'CRM_Eventmessages_DAO_EventMessageRule',
          'localizable' => 0,
          'serialize' => self::SERIALIZE_COMMA,
          'add' => NULL,
        ],
        'languages' => [
          'name' => 'languages',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Languages'),
          'description' => E::ts('list of languages'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_event_message_rules.languages',
          'default' => NULL,
          'table_name' => 'civicrm_event_message_rules',
          'entity' => 'EventMessageRule',
          'bao' => 'CRM_Eventmessages_DAO_EventMessageRule',
          'localizable' => 0,
          'serialize' => self::SERIALIZE_COMMA,
          'pseudoconstant' => [
            'optionGroupName' => 'event_messages_languages',
            'optionEditPath' => 'civicrm/admin/options/event_messages_languages',
          ],
          'add' => NULL,
        ],
        'roles' => [
          'name' => 'roles',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Roles'),
          'description' => E::ts('list of roles'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_event_message_rules.roles',
          'default' => NULL,
          'table_name' => 'civicrm_event_message_rules',
          'entity' => 'EventMessageRule',
          'bao' => 'CRM_Eventmessages_DAO_EventMessageRule',
          'localizable' => 0,
          'serialize' => self::SERIALIZE_COMMA,
          'add' => NULL,
        ],
        'weight' => [
          'name' => 'weight',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Weight'),
          'description' => E::ts('list of weights defining the order'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_event_message_rules.weight',
          'default' => NULL,
          'table_name' => 'civicrm_event_message_rules',
          'entity' => 'EventMessageRule',
          'bao' => 'CRM_Eventmessages_DAO_EventMessageRule',
          'localizable' => 0,
          'add' => NULL,
        ],
        'attachments' => [
          'name' => 'attachments',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Attachments'),
          'description' => E::ts('list of attachments'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_event_message_rules.attachments',
          'default' => NULL,
          'table_name' => 'civicrm_event_message_rules',
          'entity' => 'EventMessageRule',
          'bao' => 'CRM_Eventmessages_DAO_EventMessageRule',
          'localizable' => 0,
          'serialize' => self::SERIALIZE_JSON,
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'event_message_rules', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'event_message_rules', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'INDEX_is_active' => [
        'name' => 'INDEX_is_active',
        'field' => [
          0 => 'is_active',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_event_message_rules::0::is_active',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
